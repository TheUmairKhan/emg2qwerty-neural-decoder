import math
from collections.abc import Sequence
from pathlib import Path
from typing import Any, ClassVar, List, Tuple

import numpy as np
from typing import List, Tuple, Dict
import Levenshtein


class SpellCheck:
    """
    Merges session predictions into a single string, removes backspaces, 
    cleans newline characters (replacing them with spaces),and then perform 
    word-level alignment between predictions and reference text.
    """

    def __init__(self, dictionary: List[str] = None):
        if dictionary is None:
            dictionary = self.load_default_dictionary()
        self.dictionary = set(dictionary)
        self.session_merged_preds = {}
        self.session_cleaned_preds = {}

    # CHANGE THE PATH IN THIS LINE
    def load_default_dictionary(self, file_path: str = "/Users/umair/ECE C147/Project/emg2qwerty/words.txt") -> List[str]:
        try:
            with open(file_path, "r") as f:
                words = f.read().splitlines()
            return [word.lower() for word in words if word.isalpha()]
        except Exception as e:
            raise RuntimeError(f"Could not load default dictionary from {file_path}: {e}")

    def reset(self) -> None:
        self.session_merged_preds = {}

    def merge_predictions(self, session_name: str, labeldata_list: List[Any]) -> None:
        """
        Takes a list of LabelData objects for one session, merges all their .text 
        fields into a single string, and stores it in self.session_merged_preds.
        """
        combined_text = "".join(ld.text for ld in labeldata_list)
        self.session_merged_preds[session_name] = combined_text

    def apply_backspaces(self, text: str, backspace_char: str = "⌫") -> str:
        """
        Removes backspaced characters from the input text.
        """
        stack = []
        for c in text:
            if c == backspace_char:
                if stack:
                    stack.pop()
            else:
                stack.append(c)
        return "".join(stack)

    def remove_backspaces_all(self) -> None:
        """
        For each session in session_merged_preds, apply apply_backspaces,
        replace newline characters with spaces, and store the result in session_cleaned_preds.
        """
        self.session_cleaned_preds = {}  # reset
        for sess_name, merged_str in self.session_merged_preds.items():
            cleaned_str = self.apply_backspaces(merged_str)
            cleaned_str = cleaned_str.replace("⏎", " ")
            self.session_cleaned_preds[sess_name] = cleaned_str

    # Method Generated by chatGPT
    def get_best_match(self, word: str) -> str:
        """
        Finds the closest match in the dictionary using Levenshtein distance.
        """
        if word in self.dictionary:  # If the word is correct, return as is
            return word

        best_match = min(self.dictionary, key=lambda x: Levenshtein.distance(word, x))
        return best_match

    def correct_sentence(self, sentence: str) -> str:
        """
        Corrects a sentence by replacing each word with its nearest match.
        """
        words = sentence.split()
        corrected_words = [self.get_best_match(word) for word in words]
        return " ".join(corrected_words)

    def correct_all_sessions(self) -> Dict[str, str]:
        """
        Applies corrections to all stored session predictions.
        Returns:
            Dict[str, str]: Corrected session predictions.
        """
        corrected_sessions = {}
        for sess_name, cleaned_text in self.session_cleaned_preds.items():
            corrected_sessions[sess_name] = self.correct_sentence(cleaned_text)
        return corrected_sessions

    def show_summary(self) -> None:
        """
        Helper function to print merged and cleaned text summaries.
        """
        print("SpellCheck summary:")
        for sess_name in self.session_merged_preds.keys():
            merged = self.session_merged_preds[sess_name]
            cleaned = self.session_cleaned_preds.get(sess_name, "(not cleaned)")
            print(f"Session={sess_name}")
            print(f"  Merged:  {merged}...")
            print(f"  Cleaned: {cleaned}...")
